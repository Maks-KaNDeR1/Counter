{"version":3,"sources":["components/Buttons/button.module.css","components/Display/Score.tsx","components/Buttons/Button.tsx","redux/counter-reducer.ts","components/Display/Setting/Setting.tsx","components/Display/Setting/SettingContainer.tsx","components/Buttons/Reset/Reset.tsx","components/Buttons/Reset/ResetContainer.tsx","components/Buttons/Increment/Increment.tsx","components/Buttons/Increment/IncrementContainer.tsx","components/Counter.tsx","App.tsx","redux/redux-store.ts","reportWebVitals.ts","index.tsx","components/counter.module.css","components/Display/Setting/setting.module.css"],"names":["module","exports","Score","props","style","color","value","maxValue","fontSize","Button","className","s","buttonStyle","disabled","onClick","onClickHandler","name","initialState","count","showDisplayOrSetAC","type","Setting","onChangeStartValue","e","currentTarget","valueAsNumber","onChangeMaxValue","error","borderColor","backgroundColor","divStyle","onChange","SettingContainer","connect","state","counter","dispatch","startValue","changeStartValueAC","changeMaxValueAC","Reset","isTransparant","opacity","resetHandler","ResetContainer","Increment","incHandler","IncrementContainer","Counter","useSelector","useDispatch","display","buttons","button","console","log","App","preloadedState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","persistedTodosString","localStorage","getItem","JSON","parse","store","createStore","applyMiddleware","thunk","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9a72335.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"button_buttonStyle__SK42o\",\"button\":\"button_button__XQ_0_\"};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\n\r\nfunction Score(props: PropsType) {\r\n\r\n    return <div style={{ color: props.value === props.maxValue ? 'red' : '',\r\n    fontSize: '5rem'\r\n    }}>\r\n        {props.value}\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Score;\r\n","import React from 'react';\r\nimport s from './button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    value?: number\r\n    onClickHandler?: () => void\r\n    maxValue?: number\r\n    disabled?: boolean\r\n    style?: React.CSSProperties\r\n}\r\n\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n\r\n   \r\n    return <button className={s.buttonStyle}\r\n        disabled={props.disabled}\r\n        style={props.style}\r\n        onClick={props.onClickHandler}\r\n    >{props.name}</button>\r\n}\r\n\r\nexport default Button;\r\n","\r\n\r\n\r\ntype InitialStateType = {\r\n    value: number\r\n    maxValue: number\r\n    count: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    value: 0,\r\n    maxValue: 5,\r\n    count: true,\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'INC_VALUE': {\r\n            return {\r\n                ...state, value: state.value + 1\r\n            }\r\n        }\r\n        case 'RESET_VALUE': {\r\n            return {\r\n                ...state, value: state.value = 0\r\n            }\r\n        }\r\n        case 'CHANGE_MAX_VALUE': {\r\n            return {\r\n                ...state, maxValue: state.maxValue = action.maxValue\r\n            }\r\n        }\r\n        case 'CHANGE_START_VALUE': {\r\n            return {\r\n                ...state, value: state.value = action.startValue\r\n            }\r\n        }\r\n        case 'CHOW_DISPLAY_OR_SET': {\r\n            return {\r\n                ...state, count: state.count = action.count\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\ntype ActionType =\r\n    IncValueACType |\r\n    resetValueACType |\r\n    showDisplayOrSetACType |\r\n    ChangeMaxValueACType |\r\n    changeStartValueACType\r\n\r\ntype IncValueACType = ReturnType<typeof incValueAC>\r\nexport const incValueAC = () => ({\r\n    type: 'INC_VALUE'\r\n} as const)\r\n\r\ntype resetValueACType = ReturnType<typeof resetValueAC>\r\nexport const resetValueAC = () => ({\r\n    type: 'RESET_VALUE'\r\n} as const)\r\n\r\ntype changeStartValueACType = ReturnType<typeof changeStartValueAC>\r\nexport const changeStartValueAC = (value: number) => ({\r\n    type: 'CHANGE_START_VALUE', startValue: value\r\n} as const)\r\n\r\ntype ChangeMaxValueACType = ReturnType<typeof changeMaxValueAC>\r\nexport const changeMaxValueAC = (value: number) => ({\r\n    type: 'CHANGE_MAX_VALUE', maxValue: value\r\n} as const)\r\n\r\n\r\ntype showDisplayOrSetACType = ReturnType<typeof showDisplayOrSetAC>\r\nexport const showDisplayOrSetAC = (count: boolean) => ({\r\n    type: 'CHOW_DISPLAY_OR_SET', count\r\n} as const)\r\n","import { ChangeEvent } from 'react';\r\nimport s from './setting.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n    onChangeStartValue: (value: number) => void\r\n    onChangeMaxValue: (value: number) => void\r\n}\r\n\r\nconst Setting = (props: PropsType) => {\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeStartValue(e.currentTarget.valueAsNumber)\r\n    }\r\n  \r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeMaxValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    let error = {\r\n        color: 'red',\r\n        borderColor: 'red',\r\n        backgroundColor: 'rgb(255, 198, 198)'\r\n    }\r\n\r\n    if (props.value >= props.maxValue ) {\r\n        return (\r\n            <div>\r\n                <div className={s.divStyle} >start value:\r\n                <input style={error}  type={'number'} onChange={onChangeStartValue}\r\n            />\r\n                </div>\r\n                <div className={s.divStyle} >max value:    \r\n                <input style={error}  type={'number'} onChange={onChangeMaxValue}\r\n            />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className={s.divStyle} >start value:\r\n                <input type={'number'} onChange={onChangeStartValue}\r\n            />\r\n                </div>\r\n                <div className={s.divStyle} >max value:    \r\n                <input type={'number'} onChange={onChangeMaxValue}\r\n            />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Setting;\r\n","import { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { changeMaxValueAC, changeStartValueAC } from '../../../redux/counter-reducer';\r\nimport Setting from './Setting';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    onChangeStartValue: (value: number) => void\r\n    onChangeMaxValue: (value: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n         value: state.counter.value,\r\n         maxValue: state.counter.maxValue\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onChangeStartValue: (value: number) => {\r\n            dispatch(changeStartValueAC(value))\r\n        },\r\n        onChangeMaxValue: (value: number) => {\r\n            dispatch(changeMaxValueAC(value))\r\n        }\r\n    };\r\n}\r\n\r\nexport const SettingContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Setting);\r\n","import Button from './../Button';\r\n\r\ntype PropsType = {\r\n    value: number\r\n    resetHandler: () => void\r\n}\r\n\r\nconst Reset = (props: PropsType) => {\r\n\r\n    // const reset = () => {\r\n    //     props.resetHandler(0)\r\n    // }\r\n\r\n    let isTransparant = {\r\n        opacity: props.value === 0 ? '0.5' : '',\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button   \r\n            name='reset'\r\n            onClickHandler={props.resetHandler} \r\n            value={props.value} \r\n            style={isTransparant}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Reset;\r\n","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { resetValueAC } from '../../../redux/counter-reducer';\r\nimport Reset from './Reset';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    value: number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    resetHandler: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        value: state.counter.value\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        resetHandler: () => {\r\n            dispatch(resetValueAC())\r\n        }\r\n    }\r\n}\r\n\r\nexport const ResetContainer = connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps)\r\n(Reset);\r\n\r\n","import Button from '../Button';\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n    incHandler: () => void\r\n}\r\n\r\nconst Increment = (props: PropsType) => {\r\n\r\n\r\n    let isTransparant = {\r\n        opacity: props.value >= props.maxValue ? '0.5' : '',\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button \r\n            name='inc' \r\n            onClickHandler={props.incHandler} \r\n            value={props.value} \r\n            maxValue={props.maxValue}\r\n            disabled={props.value === props.maxValue}\r\n            style={isTransparant}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Increment;\r\n","import { connect } from 'react-redux';\r\nimport Increment from './Increment';\r\nimport { Dispatch } from 'redux';\r\nimport { incValueAC } from '../../../redux/counter-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    incHandler: () => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        value: state.counter.value,\r\n        maxValue: state.counter.maxValue\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        incHandler: () => {\r\n            dispatch(incValueAC())\r\n        }\r\n    }\r\n}\r\n\r\nexport const IncrementContainer = connect(\r\n    mapStateToProps, \r\n    mapDispatchToProps)\r\n(Increment);\r\n\r\n","import { useEffect } from 'react';\r\nimport Score from './Display/Score';\r\nimport s from './counter.module.css'\r\nimport Button from './Buttons/Button';\r\nimport { SettingContainer } from './Display/Setting/SettingContainer';\r\nimport { ResetContainer } from './Buttons/Reset/ResetContainer';\r\nimport { IncrementContainer } from './Buttons/Increment/IncrementContainer';\r\nimport { showDisplayOrSetAC } from '../redux/counter-reducer';\r\nimport { AppStateType, store } from '../redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nfunction Counter() {\r\n\r\n    const value = useSelector<AppStateType, number>(state => state.counter.value)\r\n    const count = useSelector<AppStateType, boolean>(state => state.counter.count)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = () => {\r\n        if (count === true) {\r\n            dispatch(showDisplayOrSetAC(false))\r\n        } else {\r\n            dispatch(showDisplayOrSetAC(true))\r\n        }\r\n        console.log(count)\r\n    }\r\n\r\n\r\n\r\n    //  useEffect(() => {\r\n    //     getFromLocalStorage()\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     setToLocalStorage()\r\n    // }, [value])\r\n\r\n    // const setToLocalStorage = () => {\r\n    //     localStorage.setItem('counterValueKey', JSON.stringify(value))\r\n    // }\r\n    // const getFromLocalStorage = () => {\r\n    //     let valueAString = localStorage.getItem('counterValueKey')\r\n    //     if (valueAString) {\r\n    //         let newValue = JSON.parse(valueAString)\r\n    //         changeValueAC(newValue)\r\n    //     }\r\n    // }\r\n\r\n\r\n    return <div>\r\n\r\n        <div className={s.display}>\r\n            {\r\n                count ? <Score value={value} maxValue={maxValue} />\r\n                    : <SettingContainer />\r\n            }\r\n        </div>\r\n\r\n        <div className={s.buttons} >\r\n            <div className={s.button}>\r\n                 <IncrementContainer />\r\n            </div >\r\n            <div className={s.button}>\r\n                <ResetContainer />\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    name='set' value={value}\r\n                    onClickHandler={onClickHandler}\r\n                />\r\n            </div>\r\n        </div>\r\n    </div >;\r\n}\r\n\r\nexport default Counter\r\n\r\n\r\n","import './App.css';\nimport Counter from './components/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='wrapper' >\n        <Counter />\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n\n\n","import { applyMiddleware, combineReducers, createStore } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { counterReducer } from \"./counter-reducer\"\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nlet preloadedState;\r\nconst persistedTodosString = localStorage.getItem('app-state')\r\nif (persistedTodosString) {\r\n    preloadedState = JSON.parse(persistedTodosString)\r\n}\r\n\r\nexport const store = createStore(rootReducer, preloadedState, applyMiddleware(thunk))\r\n\r\nstore.subscribe( () => {\r\n    localStorage.setItem('app-state', JSON.stringify(store.getState()))\r\n})\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppSoreType = typeof store\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/redux-store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"counter_display__1aaER\",\"button\":\"counter_button__3VvW0\",\"buttons\":\"counter_buttons__AHnYj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divStyle\":\"setting_divStyle__1J_5P\"};"],"sourceRoot":""}