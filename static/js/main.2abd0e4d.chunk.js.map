{"version":3,"sources":["components/Buttons/button.module.css","components/Display/Score.tsx","redux/counter-reducer.ts","components/Display/Setting/Setting.tsx","components/Display/Setting/SettingContainer.tsx","components/Buttons/Button.tsx","components/Buttons/Increment/Increment.tsx","components/Buttons/Reset/Reset.tsx","components/Buttons/Decrement/Decrement.tsx","components/Calculator/Calculator.tsx","components/Counter.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","utils/localstorage-utils.ts","index.tsx","components/counter.module.css","components/Display/Setting/setting.module.css","components/Calculator/Calculator.module.css"],"names":["module","exports","Score","props","twoValue","style","display","justifyContent","marginTop","color","value","maxValue","fontSize","initialState","count","showDisplayOrSet","type","Setting","onChangeStartValue","e","currentTarget","valueAsNumber","onChangeMaxValue","error","borderColor","backgroundColor","className","s","divStyle","onChange","SettingContainer","connect","state","counter","dispatch","startValue","changeStartValue","changeMaxValue","Button","buttonStyle","disabled","onClick","onClickHandler","name","Increment","useSelector","useDispatch","isTransparant","opacity","Reset","Decrement","Calculator","buttons","button","Counter","console","log","partition","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2abd0e4d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"button_buttonStyle__SK42o\",\"button\":\"button_button__XQ_0_\"};","import React from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n    twoValue: number\r\n}\r\n\r\n\r\n\r\nfunction Score(props: PropsType) {\r\n    \r\n    if (props.twoValue !== 0) {\r\n        return <div style={{ display: 'flex', justifyContent: 'space-around',\r\n            marginTop: '-15px', color: props.value || props.twoValue === props.maxValue ? 'red' : '',\r\n            fontSize: '4rem'\r\n        }}>\r\n            <span>\r\n                {props.value} \r\n                </span>\r\n                +\r\n                <span>\r\n            {props.twoValue}\r\n                </span>\r\n        </div>;\r\n    } else {\r\n\r\n        return <div style={{\r\n            marginTop: '-15px', color: props.value === props.maxValue ? 'red' : '',\r\n            fontSize: '5rem'\r\n        }}>\r\n            {props.value}\r\n        </div>;\r\n    }\r\n}\r\n\r\n\r\nexport default Score;\r\n","\r\n\r\n\r\nexport type CounterStateType = {\r\n    value: number\r\n    twoValue: number\r\n    maxValue: number\r\n    count: boolean\r\n}\r\n\r\nexport let initialState: CounterStateType = {\r\n    value: 0,\r\n    twoValue: 0,\r\n    maxValue: 5,\r\n    count: true,\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'INC_VALUE': {\r\n            return {\r\n                ...state, value: state.value + 1\r\n            }\r\n        }\r\n        case 'DEC_VALUE': {\r\n            return {\r\n                ...state, value: state.value - 1\r\n            }\r\n        }\r\n        case 'RESET_VALUE': {\r\n            return {\r\n                ...state, value: state.value = 0,\r\n            }\r\n        }\r\n        case 'CHANGE_MAX_VALUE': {\r\n            return {\r\n                ...state, maxValue: state.maxValue = action.maxValue\r\n            }\r\n        }\r\n        case 'CHANGE_START_VALUE': {\r\n            return {\r\n                ...state, value: state.value = action.startValue\r\n            }\r\n        }\r\n        case 'CHOW_DISPLAY_OR_SET': {\r\n            return {\r\n                ...state, count: state.count = action.count\r\n            }\r\n        }\r\n        case 'VALUE_PLUS_TWOVALUE': {\r\n            return {\r\n                ...state, value: state.value + state.twoValue\r\n            }\r\n        }\r\n        case 'VALUE_MINUS_TWOVALUE': {\r\n            return {\r\n                ...state, value: state.value - state.twoValue\r\n            }\r\n        }\r\n        case 'RESET_TWO_VALUE': {\r\n            return {\r\n                ...state,  twoValue: state.twoValue = 0,\r\n            }\r\n        }\r\n        case 'PLUS_VALUE': {\r\n            return {\r\n                ...state, twoValue: state.twoValue + 1\r\n            }\r\n        }\r\n        case 'MINUS_VALUE': {\r\n            return {\r\n                ...state, twoValue: state.twoValue - 1\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\ntype IncValueType = ReturnType<typeof incValue>\r\nexport const incValue = () => ({\r\n    type: 'INC_VALUE'\r\n} as const)\r\n\r\ntype DecValueType = ReturnType<typeof decValue>\r\nexport const decValue = () => ({\r\n    type: 'DEC_VALUE'\r\n} as const)\r\n\r\ntype ResetValueType = ReturnType<typeof resetValue>\r\nexport const resetValue = () => ({\r\n    type: 'RESET_VALUE'\r\n} as const)\r\n\r\ntype ChangeStartValueType = ReturnType<typeof changeStartValue>\r\nexport const changeStartValue = (value: number) => ({\r\n    type: 'CHANGE_START_VALUE', startValue: value\r\n} as const)\r\n\r\ntype ChangeMaxValueType = ReturnType<typeof changeMaxValue>\r\nexport const changeMaxValue = (value: number) => ({\r\n    type: 'CHANGE_MAX_VALUE', maxValue: value\r\n} as const)\r\n\r\n\r\ntype ShowDisplayOrSetType = ReturnType<typeof showDisplayOrSet>\r\nexport const showDisplayOrSet = (count: boolean) => ({\r\n    type: 'CHOW_DISPLAY_OR_SET', count\r\n} as const)\r\n\r\n\r\n\r\ntype ValuePlusTwoValueType = ReturnType<typeof valuePlusTwoValue>\r\nexport const valuePlusTwoValue = () => ({\r\n    type: 'VALUE_PLUS_TWOVALUE'\r\n} as const)\r\n\r\ntype ValueMinusTwoValueType = ReturnType<typeof valueMinusTwoValue>\r\nexport const valueMinusTwoValue = () => ({\r\n    type: 'VALUE_MINUS_TWOVALUE'\r\n} as const)\r\n\r\ntype ResetTwoValueType = ReturnType<typeof resetTwoValue>\r\nexport const resetTwoValue = () => ({\r\n    type: 'RESET_TWO_VALUE'\r\n} as const)\r\n\r\ntype PlusValueType = ReturnType<typeof plusValue>\r\nexport const plusValue = () => ({\r\n    type: 'PLUS_VALUE'\r\n} as const)\r\n\r\ntype MinusValueType = ReturnType<typeof minusValue>\r\nexport const minusValue = () => ({\r\n    type: 'MINUS_VALUE'\r\n} as const)\r\n\r\n\r\n\r\n\r\ntype ActionType =\r\n    IncValueType\r\n    | ResetValueType\r\n    | ShowDisplayOrSetType\r\n    | ChangeMaxValueType\r\n    | ChangeStartValueType\r\n    | DecValueType\r\n    | ValuePlusTwoValueType\r\n    | ValueMinusTwoValueType\r\n    | ResetTwoValueType\r\n    | PlusValueType\r\n    | MinusValueType\r\n","import { ChangeEvent } from 'react';\r\nimport s from './setting.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n    onChangeStartValue: (value: number) => void\r\n    onChangeMaxValue: (value: number) => void\r\n}\r\n\r\nconst Setting = (props: PropsType) => {\r\n\r\n    \r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeStartValue(e.currentTarget.valueAsNumber)\r\n    }\r\n  \r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeMaxValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    let error = {\r\n        color: 'red',\r\n        borderColor: 'red',\r\n        backgroundColor: 'rgb(255, 198, 198)'\r\n    }\r\n\r\n    if (props.value >= props.maxValue ) {\r\n        return (\r\n            <div>\r\n                <div className={s.divStyle} >start value:\r\n                <input style={error}  type={'number'} onChange={onChangeStartValue}\r\n            />\r\n                </div>\r\n                <div className={s.divStyle} >max value:    \r\n                <input style={error}  type={'number'} onChange={onChangeMaxValue}\r\n            />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className={s.divStyle} >start value:\r\n                <input type={'number'} onChange={onChangeStartValue}\r\n            />\r\n                </div>\r\n                <div className={s.divStyle} >max value:    \r\n                <input type={'number'} onChange={onChangeMaxValue}\r\n            />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Setting;\r\n","import { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { changeMaxValue, changeStartValue } from '../../../redux/counter-reducer';\r\nimport Setting from './Setting';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    onChangeStartValue: (value: number) => void\r\n    onChangeMaxValue: (value: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n         value: state.counter.value,\r\n         maxValue: state.counter.maxValue\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onChangeStartValue: (value: number) => {\r\n            dispatch(changeStartValue(value))\r\n        },\r\n        onChangeMaxValue: (value: number) => {\r\n            dispatch(changeMaxValue(value))\r\n        }\r\n    };\r\n}\r\n\r\nexport const SettingContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Setting);\r\n","import React from 'react';\r\nimport s from './button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    value?: number\r\n    onClickHandler?: () => void\r\n    maxValue?: number\r\n    disabled?: boolean\r\n    style?: React.CSSProperties\r\n}\r\n\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n\r\n   \r\n    return <button className={s.buttonStyle}\r\n        disabled={props.disabled}\r\n        style={props.style}\r\n        onClick={props.onClickHandler}\r\n    >{props.name}</button>\r\n}\r\n\r\n    \r\nexport default Button;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { CounterStateType, incValue, showDisplayOrSet } from '../../../redux/counter-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport Button from '../Button';\r\n\r\nconst Increment = () => {\r\n\r\n    const counter = useSelector<AppStateType, CounterStateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    let incHandler = () => {\r\n        dispatch(incValue())\r\n        dispatch(showDisplayOrSet(true))\r\n    }\r\n\r\n    let isTransparant = {\r\n        opacity: counter.value >= counter.maxValue ? '0.5' : '',\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button \r\n            name='inc' \r\n            onClickHandler={incHandler} \r\n            value={counter.value} \r\n            maxValue={counter.maxValue}\r\n            disabled={counter.value >= counter.maxValue}\r\n            style={isTransparant}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Increment;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { resetTwoValue } from '../../../redux/counter-reducer';\r\nimport { CounterStateType, resetValue, showDisplayOrSet } from '../../../redux/counter-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport Button from './../Button';\r\n\r\n\r\nconst Reset = () => {\r\n\r\n    const counter = useSelector<AppStateType, CounterStateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    const resetHandler = () => {\r\n        dispatch(resetValue())\r\n        dispatch(resetTwoValue())\r\n        dispatch(showDisplayOrSet(true))\r\n    }\r\n\r\n    // let isTransparant = {\r\n    //     opacity: counter.value || counter.twoValue === 0 ? '0.5' : ''\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <Button   \r\n            name='reset'\r\n            onClickHandler={resetHandler} \r\n            value={counter.value} \r\n            // style={isTransparant}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Reset;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { CounterStateType, decValue, showDisplayOrSet } from '../../../redux/counter-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport Button from '../Button';\r\n\r\nconst Decrement = () => {\r\n\r\n    const counter = useSelector<AppStateType, CounterStateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    let decHandler = () => {\r\n        dispatch(decValue())\r\n        dispatch(showDisplayOrSet(true))\r\n    }\r\n\r\n \r\n\r\n    return (\r\n        <div>\r\n            <Button \r\n            name='dec' \r\n            onClickHandler={decHandler} \r\n            value={counter.value} \r\n            maxValue={counter.maxValue}\r\n            // disabled={counter.value === counter.maxValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Decrement;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { minusValue, plusValue, resetTwoValue, valueMinusTwoValue, valuePlusTwoValue } from '../../redux/counter-reducer';\r\nimport Button from '../Buttons/Button';\r\nimport s from './Calculator.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n    twoValue: number\r\n}\r\n\r\n\r\n\r\nconst Calculator = (props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let plusHandler = () => {\r\n        dispatch(plusValue())\r\n  \r\n    }\r\n\r\n    let minusHandler = () => {\r\n        dispatch(minusValue())\r\n\r\n    }\r\n\r\n    let incHandler = () => {\r\n        dispatch(valuePlusTwoValue())\r\n        dispatch(resetTwoValue())\r\n    }\r\n    let decHandler = () => {\r\n        dispatch(valueMinusTwoValue())\r\n        dispatch(resetTwoValue())\r\n    }\r\n\r\n    \r\n    let isTransparant = {\r\n        opacity: props.twoValue >= props.maxValue ? '0.5' : '',\r\n    }\r\n\r\n    return (\r\n        <div className={s.buttons}>\r\n            <div className={s.button}>\r\n                <Button\r\n                    name='+'\r\n                    onClickHandler={plusHandler}\r\n                    disabled={props.twoValue === props.maxValue}\r\n                    style={isTransparant}\r\n                />\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    name='-'\r\n                    onClickHandler={minusHandler}\r\n                />\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    name='set'\r\n                    onClickHandler={incHandler}\r\n                    disabled={props.twoValue === props.maxValue}\r\n                    style={isTransparant}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Calculator;\r\n","import Score from './Display/Score';\r\nimport s from './counter.module.css'\r\nimport { SettingContainer } from './Display/Setting/SettingContainer';\r\nimport { resetValue, showDisplayOrSet } from '../redux/counter-reducer';\r\nimport { AppStateType } from '../redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Increment from './Buttons/Increment/Increment';\r\nimport Reset from './Buttons/Reset/Reset';\r\nimport Decrement from './Buttons/Decrement/Decrement';\r\nimport Calculator from './Calculator/Calculator';\r\nimport Button from './Buttons/Button';\r\n\r\n\r\nfunction Counter() {\r\n\r\n    const value = useSelector<AppStateType, number>(state => state.counter.value)\r\n    const twoValue = useSelector<AppStateType, number>(state => state.counter.twoValue)\r\n    const count = useSelector<AppStateType, boolean>(state => state.counter.count)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = () => {\r\n        if (count === true) {\r\n            dispatch(showDisplayOrSet(false))\r\n            dispatch(resetValue())\r\n        } else {\r\n            dispatch(showDisplayOrSet(true))\r\n        }\r\n    }\r\n\r\n    console.log(value);\r\n\r\n    return <div>\r\n        <div className={s.display}>\r\n            <h2>{maxValue}</h2>\r\n            <div className={s.partition} ></div>\r\n            {\r\n                count ? <Score twoValue={twoValue} value={value} maxValue={maxValue} />\r\n                    : <SettingContainer />\r\n            }\r\n        </div>\r\n\r\n        <div className={s.buttons} >\r\n            <div className={s.button}>\r\n                <Increment />\r\n            </div >\r\n            <div className={s.button}>\r\n                <Decrement />\r\n            </div>\r\n            <div className={s.button}>\r\n                <Reset />\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    name='sett' value={value}\r\n                    onClickHandler={onClickHandler}\r\n                />\r\n            </div>\r\n                <Calculator value={value}  twoValue={twoValue} maxValue={maxValue}  />\r\n        </div>\r\n    </div >;\r\n}\r\n\r\nexport default Counter\r\n\r\n\r\n","import './App.css';\nimport Counter from './components/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='wrapper' >\n        <Counter />\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { loadState, saveState } from \"../utils/localstorage-utils\"\r\nimport { counterReducer } from \"./counter-reducer\"\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter,\r\n    })\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppSoreType = typeof store\r\n","import { AppStateType } from './../redux/redux-store';\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/redux-store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"counter_display__1aaER\",\"partition\":\"counter_partition__1HgY8\",\"buttons\":\"counter_buttons__AHnYj\",\"button\":\"counter_button__3VvW0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divStyle\":\"setting_divStyle__1J_5P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Calculator_buttons__OY5Zo\",\"button\":\"Calculator_button__1XDPu\"};"],"sourceRoot":""}