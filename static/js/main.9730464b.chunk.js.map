{"version":3,"sources":["components/counter.module.css","components/Display/setting.module.css","components/Buttons/button.module.css","components/Buttons/Button.tsx","components/Buttons/Increment.tsx","components/Buttons/Reset.tsx","components/Display/Score.tsx","components/Display/Setting.tsx","components/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","s","buttonStyle","disabled","style","onClick","onClickHandler","name","Increment","isTransparant","opacity","value","maxValue","setValue","Reset","Score","color","fontSize","Setting","onChangeMaxValue","e","setMaxValue","currentTarget","valueAsNumber","onChangeStartValue","error","borderColor","backgroundColor","divStyle","type","onChange","Counter","useState","count","setCount","useEffect","getFromLocalStorage","setToLocalStorage","localStorage","setItem","JSON","stringify","valueAString","getItem","newValue","parse","display","buttons","button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,QAAU,2B,gBCAhGD,EAAOC,QAAU,CAAC,SAAW,4B,mBCA7BD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,OAAS,yB,6JCsBtDC,EAVA,SAACC,GAGZ,OAAO,wBAAQC,UAAWC,IAAEC,YACxBC,SAAUJ,EAAMI,SAChBC,MAAOL,EAAMK,MACbC,QAASN,EAAMO,eAHZ,SAILP,EAAMQ,QCcGC,EAzBG,SAACT,GAEf,IAIIU,EAAgB,CAChBC,QAASX,EAAMY,OAASZ,EAAMa,SAAW,MAAQ,IAGrD,OACI,8BACI,cAAC,EAAD,CACAL,KAAK,MACLD,eAZU,WACdP,EAAMc,SAASd,EAAMY,MAAQ,IAYzBA,MAAOZ,EAAMY,MACbC,SAAUb,EAAMa,SAChBT,SAAUJ,EAAMY,QAAUZ,EAAMa,SAChCR,MAAOK,OCIJK,EAvBD,SAACf,GAEX,IAIIU,EAAgB,CAChBC,QAAyB,IAAhBX,EAAMY,MAAc,MAAQ,IAGzC,OACI,8BACI,cAAC,EAAD,CACAJ,KAAK,QACLD,eAZM,WACVP,EAAMc,SAAS,IAYXF,MAAOZ,EAAMY,MACbP,MAAOK,OCNJM,MATf,SAAehB,GACX,OAAO,qBAAKK,MAAO,CAAEY,MAAOjB,EAAMY,QAAUZ,EAAMa,SAAW,MAAQ,GACrEK,SAAU,QADH,SAGFlB,EAAMY,S,gBCwDAO,EA3DC,SAACnB,GAEb,IAAMoB,EAAmB,SAACC,GACtBrB,EAAMsB,YAAYD,EAAEE,cAAcC,gBAEhCC,EAAqB,SAACJ,GACxBrB,EAAMc,SAASO,EAAEE,cAAcC,gBAI/BE,EAAQ,CACRT,MAAO,MACPU,YAAa,MACbC,gBAAiB,sBAGrB,OAAI5B,EAAMY,OAASZ,EAAMa,SAEjB,gCACI,sBAAKZ,UAAWC,IAAE2B,SAAlB,uBACA,uBAAOxB,MAAOqB,EAAQI,KAAM,SAAUC,SAAUX,OAGhD,sBAAKnB,UAAWC,IAAE2B,SAAlB,yBACA,uBAAOxB,MAAOqB,EAAQI,KAAM,SAAUC,SAAUN,UAOpD,gCACI,sBAAKxB,UAAWC,IAAE2B,SAAlB,uBACA,uBAAOC,KAAM,SAAUC,SAAUX,OAGjC,sBAAKnB,UAAWC,IAAE2B,SAAlB,yBACA,uBAAOC,KAAM,SAAUC,SAAUN,W,gBC6BlCO,MApEf,WAAoB,IAAD,EAESC,mBAAS,GAFlB,mBAEVrB,EAFU,KAEHE,EAFG,OAGSmB,oBAAS,GAHlB,mBAGVC,EAHU,KAGHC,EAHG,OAIeF,mBAAS,GAJxB,mBAIVpB,EAJU,KAIAS,EAJA,KAOfc,qBAAU,WACNC,MACD,IAEHD,qBAAU,WACNE,MACD,CAAC1B,IAEJ,IAAM0B,EAAoB,WACtBC,aAAaC,QAAQ,kBAAmBC,KAAKC,UAAU9B,KAErDyB,EAAsB,WACxB,IAAIM,EAAeJ,aAAaK,QAAQ,mBACxC,GAAID,EAAc,CACd,IAAIE,EAAWJ,KAAKK,MAAMH,GAC1B7B,EAAS+B,KAcjB,OAAO,gCAEH,qBAAK5C,UAAWC,IAAE6C,QAAlB,SAEQb,EAAQ,cAAC,EAAD,CAAOtB,MAAOA,EAAOC,SAAUA,IACjC,cAAC,EAAD,CACFD,MAAOA,EACPC,SAAUA,EACVC,SAAUA,EACVQ,YAAaA,MAKzB,sBAAKrB,UAAWC,IAAE8C,QAAlB,UACI,qBAAK/C,UAAWC,IAAE+C,OAAlB,SACI,cAAC,EAAD,CAAWrC,MAAOA,EAAOE,SAAUA,EAAUD,SAAUA,MAE3D,qBAAKZ,UAAWC,IAAE+C,OAAlB,SACI,cAAC,EAAD,CAAOrC,MAAOA,EAAOE,SAAUA,MAEnC,qBAAKb,UAAWC,IAAE+C,OAAlB,SACI,cAAC,EAAD,CAECzC,KAAK,MAAMI,MAAOA,EACjBL,eAlCS,WAEf4B,GADS,IAAVD,eCrBIgB,MAXf,WACE,OACE,qBAAKjD,UAAU,MAAf,SACE,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,SCMOkD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9730464b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"counter_display__1aaER\",\"button\":\"counter_button__3VvW0\",\"buttons\":\"counter_buttons__AHnYj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divStyle\":\"setting_divStyle__1MEAo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"button_buttonStyle__SK42o\",\"button\":\"button_button__XQ_0_\"};","import React, { KeyboardEvent } from 'react';\r\nimport s from './button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    value?: number\r\n    onClickHandler?: () => void\r\n    maxValue?: number\r\n    disabled?: boolean\r\n    style?: React.CSSProperties\r\n}\r\n\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n\r\n   \r\n    return <button className={s.buttonStyle}\r\n        disabled={props.disabled}\r\n        style={props.style}\r\n        onClick={props.onClickHandler}\r\n    >{props.name}</button>\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\ntype PropsType = {\r\n    value: number\r\n    setValue: (value: number) => void\r\n    maxValue: number\r\n}\r\n\r\nconst Increment = (props: PropsType) => {\r\n\r\n    const increment = () => {\r\n        props.setValue(props.value + 1)\r\n    }\r\n\r\n    let isTransparant = {\r\n        opacity: props.value >= props.maxValue ? '0.5' : '',\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button \r\n            name='inc' \r\n            onClickHandler={increment} \r\n            value={props.value} \r\n            maxValue={props.maxValue}\r\n            disabled={props.value === props.maxValue}\r\n            style={isTransparant}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Increment;\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\ntype PropsType = {\r\n    value: number\r\n    setValue: (value: number) => void\r\n}\r\n\r\nconst Reset = (props: PropsType) => {\r\n\r\n    const reset = () => {\r\n        props.setValue(0)\r\n    }\r\n\r\n    let isTransparant = {\r\n        opacity: props.value === 0 ? '0.5' : '',\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button   \r\n            name='reset'\r\n            onClickHandler={reset} \r\n            value={props.value} \r\n            style={isTransparant}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Reset;\r\n","import React from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\n\r\nfunction Score(props: PropsType) {\r\n    return <div style={{ color: props.value === props.maxValue ? 'red' : '',\r\n    fontSize: '5rem'\r\n    }}>\r\n        {props.value}\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Score;\r\n","import React, { ChangeEvent } from 'react';\r\nimport s from './setting.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    maxValue: number\r\n    setValue: (value: number) => void\r\n    setMaxValue: (value: number) => void\r\n}\r\n\r\nconst Setting = (props: PropsType) => {\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxValue(e.currentTarget.valueAsNumber)\r\n    }\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setValue(e.currentTarget.valueAsNumber)\r\n    }\r\n  \r\n\r\n    let error = {\r\n        color: 'red',\r\n        borderColor: 'red',\r\n        backgroundColor: 'rgb(255, 198, 198)'\r\n    }\r\n\r\n    if (props.value >= props.maxValue ) {\r\n        return (\r\n            <div>\r\n                <div className={s.divStyle} >max value:    \r\n                <input style={error}  type={'number'} onChange={onChangeMaxValue}\r\n            />\r\n                </div>\r\n                <div className={s.divStyle} >start value:\r\n                <input style={error}  type={'number'} onChange={onChangeStartValue}\r\n            />\r\n                </div>\r\n            </div>\r\n        )\r\n    }else {\r\n        return (\r\n            <div>\r\n                <div className={s.divStyle} >max value:    \r\n                <input type={'number'} onChange={onChangeMaxValue}\r\n            />\r\n                </div>\r\n                <div className={s.divStyle} >start value:\r\n                <input type={'number'} onChange={onChangeStartValue}\r\n            />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <div className={s.divStyle} >max value:    \r\n    //         <input style={error}  type={'number'} onChange={onChangeMaxValue}\r\n    //     />\r\n    //         </div>\r\n    //         <div className={s.divStyle} >start value:\r\n    //         <input style={error}  type={'number'} onChange={onChangeStartValue}\r\n    //     />\r\n    //         </div>\r\n    //     </div>\r\n    // )\r\n}\r\n\r\nexport default Setting;\r\n","import React, { ChangeEvent, FormEvent, KeyboardEvent, useEffect, useState } from 'react';\r\nimport Increment from './Buttons/Increment';\r\nimport Reset from './Buttons/Reset';\r\nimport Score from './Display/Score';\r\nimport Setting from './Display/Setting';\r\nimport s from './counter.module.css'\r\nimport Button from './Buttons/Button';\r\n\r\nfunction Counter() {\r\n\r\n    let [value, setValue] = useState(0)\r\n    let [count, setCount] = useState(true)\r\n    let [maxValue, setMaxValue] = useState(5)\r\n\r\n\r\n    useEffect(() => {\r\n        getFromLocalStorage()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setToLocalStorage()\r\n    }, [value])\r\n\r\n    const setToLocalStorage = () => {\r\n        localStorage.setItem('counterValueKey', JSON.stringify(value))\r\n    }\r\n    const getFromLocalStorage = () => {\r\n        let valueAString = localStorage.getItem('counterValueKey')\r\n        if (valueAString) {\r\n            let newValue = JSON.parse(valueAString)\r\n            setValue(newValue)\r\n        }\r\n    }\r\n\r\n  \r\n    const onClickHandler = () => {\r\n        if(count === true) {\r\n            setCount(false)\r\n        } else { \r\n            setCount(true)\r\n        }\r\n    }\r\n \r\n\r\n    return <div>\r\n\r\n        <div className={s.display}>\r\n            {\r\n                count ? <Score value={value} maxValue={maxValue} />\r\n                    : <Setting \r\n                    value={value}\r\n                    maxValue={maxValue} \r\n                    setValue={setValue}\r\n                    setMaxValue={setMaxValue}\r\n                    />\r\n            }\r\n         </div>\r\n\r\n        <div className={s.buttons} >\r\n            <div className={s.button}>\r\n                <Increment value={value} setValue={setValue} maxValue={maxValue} />\r\n            </div >\r\n            <div className={s.button}>\r\n                <Reset value={value} setValue={setValue} />\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button \r\n                // onKeyPressHandler={onKeyPressHandler}\r\n                 name='set' value={value}\r\n                  onClickHandler={onClickHandler}\r\n                />\r\n            </div>\r\n        </div>\r\n    </div >;\r\n}\r\n\r\nexport default Counter\r\n\r\n\r\n","import React, { ChangeEvent, useState } from 'react'\nimport './App.css';\nimport Counter from './components/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='wrapper' >\n        <Counter />\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}